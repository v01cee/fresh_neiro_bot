import asyncio
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from core.services.ai import ask_ai
from core.utils.ai import validate_phone, format_phone
from core.handlers.state.dialog import ClientDialog
from core.utils.messages import *
from core.utils.summary import create_problem_summary, update_problem_summary, create_solution_summary, update_solution_summary
from core.services.webhook import send_client_data_to_webhook, format_client_data_for_webhook

router = Router(name="core_message_router")

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
    await state.clear()
    await message.answer(WELCOME_MESSAGE)
    await state.set_state(ClientDialog.waiting_for_name)

@router.message()
async def handle_message(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ—à–∞–≥–æ–≤—ã–º –¥–∏–∞–ª–æ–≥–æ–º
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.text:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–æ–ª–æ—Å–æ–≤–æ–µ), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ voice.py
        return
    
    user_message = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
    if not current_state:
        await cmd_start(message, state)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if current_state == ClientDialog.waiting_for_name.state:
        await handle_name_step(message, state, user_message)
        
    elif current_state == ClientDialog.waiting_for_phone.state:
        await handle_phone_step(message, state, user_message)
        
    elif current_state == ClientDialog.waiting_for_details.state:
        await handle_details_step(message, state, user_message)
        
    elif current_state == ClientDialog.waiting_for_confirmation.state:
        await handle_confirmation_step(message, state, user_message)
        
    elif current_state == ClientDialog.waiting_for_solution.state:
        await handle_solution_step(message, state, user_message)
        
    elif current_state == ClientDialog.waiting_for_solution_confirmation.state:
        await handle_solution_confirmation_step(message, state, user_message)

async def handle_name_step(message: types.Message, state: FSMContext, user_message: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞)
    name_parts = user_message.split()
    if len(name_parts) < 2:
        await message.answer(NAME_REQUEST)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.update_data(client_name=user_message)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await message.answer(PHONE_REQUEST_TEMPLATE)
    await state.set_state(ClientDialog.waiting_for_phone)

async def handle_phone_step(message: types.Message, state: FSMContext, user_message: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if validate_phone(user_message):
        formatted_phone = format_phone(user_message)
        await state.update_data(client_phone=formatted_phone)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ—Ç–∞–ª—è–º –ø—Ä–æ–±–ª–µ–º—ã (–∏–∑–≤–∏–Ω–µ–Ω–∏–µ + –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π)
        await message.answer(TOPIC_REQUEST)
        await state.set_state(ClientDialog.waiting_for_details)
    else:
        await message.answer(PHONE_ERROR)



async def handle_details_step(message: types.Message, state: FSMContext, user_message: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    await state.update_data(client_details=user_message)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ –ø—Ä–æ–±–ª–µ–º—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∫ —Ç–µ–º—É –∏ –¥–µ—Ç–∞–ª–∏)
    summary = create_problem_summary("–ü—Ä–æ–±–ª–µ–º–∞ –∫–ª–∏–µ–Ω—Ç–∞", user_message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—é–º–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(problem_summary=summary)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Ä–µ–∑—é–º–µ
    confirmation_text = CONFIRMATION_TEMPLATE.format(summary=summary)
    await message.answer(confirmation_text)
    await state.set_state(ClientDialog.waiting_for_confirmation)

async def handle_confirmation_step(message: types.Message, state: FSMContext, user_message: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_response = user_message.lower().strip()
    
    if user_response in POSITIVE_ANSWERS:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ä–µ—à–µ–Ω–∏—è
        await message.answer(SOLUTION_REQUEST)
        await state.set_state(ClientDialog.waiting_for_solution)
        
    elif user_response in NEGATIVE_ANSWERS:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ - –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–±–ª–µ–º—ã
        await message.answer("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –∏—Å–ø—Ä–∞–≤–∏–º. " + TOPIC_REQUEST)
        await state.set_state(ClientDialog.waiting_for_details)
        
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        data = await state.get_data()
        original_summary = data.get('problem_summary', '')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è
        new_summary = update_problem_summary(original_summary, user_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ
        await state.update_data(problem_summary=new_summary)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_text = CONFIRMATION_UPDATE_TEMPLATE.format(summary=new_summary)
        await message.answer(confirmation_text)

async def handle_solution_step(message: types.Message, state: FSMContext, user_message: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
    await state.update_data(client_solution=user_message)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è
    summary = create_solution_summary(user_message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—é–º–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(solution_summary=summary)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Ä–µ–∑—é–º–µ
    confirmation_text = SOLUTION_CONFIRMATION_TEMPLATE.format(summary=summary)
    await message.answer(confirmation_text)
    await state.set_state(ClientDialog.waiting_for_solution_confirmation)

async def handle_solution_confirmation_step(message: types.Message, state: FSMContext, user_message: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è"""
    user_response = user_message.lower().strip()
    
    if user_response in POSITIVE_ANSWERS:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        data = await state.get_data()
        print(f"üìã –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
        client_data = format_client_data_for_webhook(
            name=data.get('client_name', ''),
            phone=data.get('client_phone', ''),
            problem_description=data.get('client_details', ''),
            client_offer=data.get('client_solution', '')
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–µ–±—Ö—É–∫
        print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–µ–±—Ö—É–∫...")
        webhook_success = send_client_data_to_webhook(client_data)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if webhook_success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–µ–±—Ö—É–∫–∞
        await message.answer(SUCCESS_TEMPLATE)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    elif user_response in NEGATIVE_ANSWERS:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ - –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è
        await message.answer("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –∏—Å–ø—Ä–∞–≤–∏–º. " + SOLUTION_REQUEST)
        await state.set_state(ClientDialog.waiting_for_solution)
        
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        data = await state.get_data()
        original_summary = data.get('solution_summary', '')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è
        new_summary = update_solution_summary(original_summary, user_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ
        await state.update_data(solution_summary=new_summary)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_text = SOLUTION_CONFIRMATION_UPDATE_TEMPLATE.format(summary=new_summary)
        await message.answer(confirmation_text) 