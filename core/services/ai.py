import requests
from core.utils.config import DEEPSEEK_API_KEY, API_URL, DEEPSEEK_MODEL
from core.utils.prompt import SYSTEM_PROMPT, OFF_TOPIC_RESPONSE, AUTO_RELEVANCE_SYSTEM_PROMPT

def is_off_topic(message: str) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–ª–µ—á–µ–Ω–Ω–æ–π —Ç–µ–º–æ–π –ø—Ä–∏ –ø–æ–º–æ—â–∏ DeepSeek-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–º–µ –∞–≤—Ç–æ/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è.
    """
    try:
        if not message or not message.strip():
            return False
        # –ï—Å–ª–∏ API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if DEEPSEEK_API_KEY == "–≤–∞—à_deepseek_api_key" or not DEEPSEEK_API_KEY:
            return False
        messages = [
            {"role": "system", "content": AUTO_RELEVANCE_SYSTEM_PROMPT},
            {"role": "user", "content": f"–¢–µ–∫—Å—Ç: {message}\n–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ YES –∏–ª–∏ NO."}
        ]
        headers = {"Authorization": f"Bearer {DEEPSEEK_API_KEY}", "Content-Type": "application/json"}
        data = {
            "model": DEEPSEEK_MODEL,
            "messages": messages
        }
        response = requests.post(API_URL, json=data, headers=headers, timeout=10)
        if response.ok:
            raw = response.json().get("choices", [{}])[0].get("message", {}).get("content", "")
            label = (raw or "").strip().upper()
            is_relevant = label.startswith("YES")
            return not is_relevant
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
        return False

def ask_ai(user_message: str, history=None) -> str:
    if history is None:
        history = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–ª–µ—á–µ–Ω–Ω–æ–π —Ç–µ–º–æ–π
    if is_off_topic(user_message):
        return OFF_TOPIC_RESPONSE
    
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        *history,
        {"role": "user", "content": user_message}
    ]
    headers = {"Authorization": f"Bearer {DEEPSEEK_API_KEY}", "Content-Type": "application/json"}
    data = {
        "model": DEEPSEEK_MODEL,
        "messages": messages
    }
    response = requests.post(API_URL, json=data, headers=headers)
    if response.ok:
        return response.json().get("choices", [{}])[0].get("message", {}).get("content", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.")
    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò-—Å–µ—Ä–≤–∏—Å—É."

def fix_grammar(text: str) -> str:
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞–º–º–∞—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é DeepSeek
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ API –∫–ª—é—á
    if DEEPSEEK_API_KEY == "–≤–∞—à_deepseek_api_key" or not DEEPSEEK_API_KEY:
        print("‚ö†Ô∏è API –∫–ª—é—á DeepSeek –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.")
        return text
    
    prompt = f"""
    –ò—Å–ø—Ä–∞–≤—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–µ–∫—Å—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    
    –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    - –ù–ï –ú–ï–ù–Ø–ô —Å–º—ã—Å–ª, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    - –ò—Å–ø—Ä–∞–≤–ª—è–π –¢–û–õ–¨–ö–û –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–ø–∞–¥–µ–∂–∏, —Å–ø—Ä—è–∂–µ–Ω–∏—è, —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è)
    - –ò—Å–ø—Ä–∞–≤–ª—è–π —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∏ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö
    - –ò—Å–ø—Ä–∞–≤–ª—è–π —Å–ø—Ä—è–∂–µ–Ω–∏—è –≥–ª–∞–≥–æ–ª–æ–≤
    - –°–æ—Ö—Ä–∞–Ω—è–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å —Ä–µ—á–∏
    - –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞
    
    –¢–µ–∫—Å—Ç: {text}
    
    –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    """
    
    try:
        messages = [
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫. –ò—Å–ø—Ä–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É, –Ω–µ –º–µ–Ω—è—è —Å–º—ã—Å–ª."},
            {"role": "user", "content": prompt}
        ]
        headers = {"Authorization": f"Bearer {DEEPSEEK_API_KEY}", "Content-Type": "application/json"}
        data = {
            "model": DEEPSEEK_MODEL,
            "messages": messages
        }
        print(f"üîß –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API...")
        print(f"üîß URL: {API_URL}")
        print(f"üîß –ú–æ–¥–µ–ª—å: {DEEPSEEK_MODEL}")
        response = requests.post(API_URL, json=data, headers=headers)
        print(f"üîß –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.ok:
            response_data = response.json()
            print(f"üîß –û—Ç–≤–µ—Ç API: {response_data}")
            corrected_text = response_data.get("choices", [{}])[0].get("message", {}).get("content", text)
            return corrected_text.strip()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏: {response.status_code}")
            print(f"‚ùå –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            return text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏: {e}")
        return text 