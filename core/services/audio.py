import os
import json
import wave
import tempfile
from typing import Optional, Tuple
import vosk
import soundfile as sf
from aiogram.types import Voice, Audio

class AudioProcessor:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∞—É–¥–∏–æ —Å Vosk –º–æ–¥–µ–ª—å—é"""
        self.model_path = "vosk-model-small-ru"
        self.model = None
        self.initialize_model()
    
    def initialize_model(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Vosk"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
            if os.path.exists(self.model_path):
                self.model = vosk.Model(self.model_path)
                print(f"–ú–æ–¥–µ–ª—å Vosk –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.model_path}")
            else:
                print("–ú–æ–¥–µ–ª—å Vosk –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–∫–∞—á–∏–≤–∞–µ–º...")
                self.download_model()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ Vosk: {e}")
    
    def download_model(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Vosk –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
        import urllib.request
        import zipfile
        
        model_url = "https://alphacephei.com/vosk/models/vosk-model-small-ru-0.22.zip"
        zip_path = "vosk-model-small-ru.zip"
        
        try:
            print("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Vosk...")
            urllib.request.urlretrieve(model_url, zip_path)
            
            print("–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏...")
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(".")
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É
            if os.path.exists("vosk-model-small-ru-0.22"):
                os.rename("vosk-model-small-ru-0.22", self.model_path)
            
            # –£–¥–∞–ª—è–µ–º zip —Ñ–∞–π–ª
            os.remove(zip_path)
            
            self.model = vosk.Model(self.model_path)
            print("–ú–æ–¥–µ–ª—å Vosk —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
    
    async def process_voice_message(self, voice: Voice, bot) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        try:
            print("üé§ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ AudioProcessor")
            print(f"üé§ –ú–æ–¥–µ–ª—å Vosk –≥–æ—Ç–æ–≤–∞: {self.model is not None}")
            if self.model:
                print(f"üé§ –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏: {self.model_path}")
            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            print("üé§ –°–∫–∞—á–∏–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            voice_file = await bot.get_file(voice.file_id)
            voice_bytes = await bot.download_file(voice_file.file_path)
            voice_bytes = voice_bytes.read()
            print(f"üé§ –°–∫–∞—á–∞–Ω–æ {len(voice_bytes)} –±–∞–π—Ç")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            print("üé§ –°–æ—Ö—Ä–∞–Ω—è—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_file:
                temp_file.write(voice_bytes)
                temp_path = temp_file.name
            print(f"üé§ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_path}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º
            print("üé§ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é...")
            text = self.convert_and_recognize(temp_path)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            print("üé§ –£–¥–∞–ª—è—é –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
            os.unlink(temp_path)
            
            return text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def convert_and_recognize(self, audio_path: str) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ WAV –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏"""
        try:
            print("üé§ –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...")
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV
            wav_path = self.convert_to_wav(audio_path)
            
            if not wav_path:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ WAV")
                return None
            
            print(f"‚úÖ WAV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {wav_path}")
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            print("üé§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")
            text = self.recognize_speech(wav_path)
            print(f"üé§ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: '{text}'")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
            os.unlink(wav_path)
            print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            
            return text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def convert_to_wav(self, audio_path: str) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –≤ WAV —Ñ–æ—Ä–º–∞—Ç"""
        try:
            print(f"üé§ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Ñ–∞–π–ª: {audio_path}")
            # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            data, samplerate = sf.read(audio_path)
            print(f"üé§ –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ: {len(data)} —Å—ç–º–ø–ª–æ–≤, —á–∞—Å—Ç–æ—Ç–∞: {samplerate} Hz")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
            wav_path = audio_path.replace('.ogg', '.wav')
            print(f"üé§ WAV –ø—É—Ç—å: {wav_path}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 16kHz –¥–ª—è Vosk
            if samplerate != 16000:
                print(f"üé§ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —á–∞—Å—Ç–æ—Ç—É —Å {samplerate} Hz –≤ 16000 Hz")
                import librosa
                data = librosa.resample(data, orig_sr=samplerate, target_sr=16000)
                samplerate = 16000
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ WAV
            sf.write(wav_path, data, samplerate, subtype='PCM_16')
            print("‚úÖ WAV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å —á–∞—Å—Ç–æ—Ç–æ–π 16kHz")
            
            return wav_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WAV: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def recognize_speech(self, wav_path: str) -> Optional[str]:
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏–∑ WAV —Ñ–∞–π–ª–∞"""
        try:
            if not self.model:
                print("‚ùå –ú–æ–¥–µ–ª—å Vosk –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return None
            
            print("‚úÖ –ú–æ–¥–µ–ª—å Vosk –≥–æ—Ç–æ–≤–∞")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
            rec = vosk.KaldiRecognizer(self.model, 16000)
            print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
            
            # –ß–∏—Ç–∞–µ–º WAV —Ñ–∞–π–ª
            print("üé§ –ß–∏—Ç–∞—é WAV —Ñ–∞–π–ª...")
            with wave.open(wav_path, 'rb') as wf:
                frames_count = 0
                while True:
                    data = wf.readframes(4000)
                    if len(data) == 0:
                        break
                    rec.AcceptWaveform(data)
                    frames_count += 1
                print(f"üé§ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {frames_count} —Ñ—Ä–µ–π–º–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("üé§ –ü–æ–ª—É—á–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
            result = json.loads(rec.FinalResult())
            print(f"üé§ –°—ã—Ä–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            text = result.get('text', '').strip()
            print(f"üé§ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{text}'")
            
            return text if text else None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def is_model_ready(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        return self.model is not None

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
audio_processor = AudioProcessor() 